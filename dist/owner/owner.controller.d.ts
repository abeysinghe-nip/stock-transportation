import { OwnerService } from './owner.service';
import { Response } from 'express';
import { OwnerDto } from './dtos/owner.dto';
import { CommonService } from 'src/common/common.service';
import { DriverDto } from 'src/driver/dtos/driver.dto';
import { DriverService } from 'src/driver/driver.service';
import { VehicleDto } from 'src/vehicle/dtos/vehicle.dto';
import { VehicleService } from 'src/vehicle/vehicle.service';
import { SignInDto } from 'src/common/requests/signIn.dto';
import { AssignDriverReq } from './requests/assignDriver.req';
import { AuthService } from 'src/auth/auth.service';
import { BookingService } from 'src/booking/booking.service';
import { ChangePasswordReq } from 'src/common/requests/changePassword.req';
import { BankAccReq } from './requests/bankAcc.req';
import { WithdrawalReq } from './requests/withdrawal.req';
import { UpdateProfileReq } from 'src/common/requests/updateProfile.req';
export declare class OwnerController {
    private readonly ownerService;
    private readonly commonService;
    private readonly driverService;
    private readonly vehicleService;
    private readonly authService;
    private readonly bookingService;
    constructor(ownerService: OwnerService, commonService: CommonService, driverService: DriverService, vehicleService: VehicleService, authService: AuthService, bookingService: BookingService);
    tempCreate(ownerDto: OwnerDto, res: Response): Promise<Response<any, Record<string, any>>>;
    signin(signinDto: SignInDto, res: Response): Promise<Response<any, Record<string, any>>>;
    emailAvailability(email: string, res: Response): Promise<Response<any, Record<string, any>>>;
    createDriver(driverDto: DriverDto, res: Response): Promise<Response<any, Record<string, any>>>;
    createVehile(vehicleDto: VehicleDto, res: Response): Promise<Response<any, Record<string, any>>>;
    assignDriver(assignDriver: AssignDriverReq, res: Response): Promise<Response<any, Record<string, any>>>;
    getAssignedDrivers(id: string, res: Response): Promise<Response<any, Record<string, any>>>;
    getUnssignedDrivers(id: string, res: Response): Promise<Response<any, Record<string, any>>>;
    getUnssignedVehicles(id: string, res: Response): Promise<Response<any, Record<string, any>>>;
    unassignDriver(id: string, res: Response): Promise<Response<any, Record<string, any>>>;
    getMyBookings(id: string, res: Response): Promise<Response<any, Record<string, any>>>;
    getDriverVehicles(id: string, res: Response): Promise<Response<any, Record<string, any>>>;
    getDrivers(id: string, res: Response): Promise<Response<any, Record<string, any>>>;
    disableDriver(id: string, res: Response): Promise<Response<any, Record<string, any>>>;
    enableDriver(id: string, res: Response): Promise<Response<any, Record<string, any>>>;
    changeDriverPassword(passwordReq: ChangePasswordReq, id: string, res: Response): Promise<Response<any, Record<string, any>>>;
    getWalletData(id: string, res: Response): Promise<Response<any, Record<string, any>>>;
    createBankAccount(id: string, bankReq: BankAccReq, res: Response): Promise<Response<any, Record<string, any>>>;
    makeWithdrawal(id: string, withdrawalReq: WithdrawalReq, res: Response): Promise<Response<any, Record<string, any>>>;
    checkBankAcc(id: string, res: Response): Promise<Response<any, Record<string, any>>>;
    getRewards(id: string, res: Response): Promise<Response<any, Record<string, any>>>;
    getProfile(id: string, res: Response): Promise<Response<any, Record<string, any>>>;
    updateProfile(profileUpdate: UpdateProfileReq, id: string, res: Response): Promise<Response<any, Record<string, any>>>;
    getDriversBookingCount(id: string, res: Response): Promise<Response<any, Record<string, any>>>;
    getNotifications(id: string, res: Response): Promise<Response<any, Record<string, any>>>;
    getOwnerRates(ownerId: string, res: Response): Promise<Response<any, Record<string, any>>>;
}
