import { Repository } from 'typeorm';
import { Owner } from './entities/owner.entity';
import { OwnerDto } from './dtos/owner.dto';
import { TempOwner } from './entities/tempOwner.entity';
import { CommonService } from 'src/common/common.service';
import { AssignDriverReq } from './requests/assignDriver.req';
import { DriverVehicle } from 'src/driver/entities/driver.vehicle.entity';
import { Driver } from 'src/driver/entities/driver.entity';
import { Vehicle } from 'src/vehicle/entities/vehicle.entity';
import { CommonRes } from 'src/common/responses/common.res';
import { ChangePasswordReq } from 'src/common/requests/changePassword.req';
import { OwnerWallet } from './entities/ownerWallet.entity';
import { WalletRes } from './responses/wallet.res';
import { OwnerCredit } from './entities/ownerCredit.entity';
import { OwnerDebit } from './entities/ownerDebit.entity';
import { BankAccReq } from './requests/bankAcc.req';
import { WithdrawalReq } from './requests/withdrawal.req';
import { OwnerRewards } from './entities/ownerRewards.entity';
import { UpdateProfileReq } from 'src/common/requests/updateProfile.req';
import { OwnerNotification } from './entities/ownerNotification.entity';
export declare class OwnerService {
    private ownerRepo;
    private tempOwnerRepo;
    private driverVehicleRepo;
    private driverRepo;
    private vehicleRepo;
    private walletRepo;
    private creditRepo;
    private debitRepo;
    private rewardsRepo;
    private notificationRepo;
    private readonly commonService;
    constructor(ownerRepo: Repository<Owner>, tempOwnerRepo: Repository<TempOwner>, driverVehicleRepo: Repository<DriverVehicle>, driverRepo: Repository<Driver>, vehicleRepo: Repository<Vehicle>, walletRepo: Repository<OwnerWallet>, creditRepo: Repository<OwnerCredit>, debitRepo: Repository<OwnerDebit>, rewardsRepo: Repository<OwnerRewards>, notificationRepo: Repository<OwnerNotification>, commonService: CommonService);
    create(ownerDto: OwnerDto): Promise<TempOwner>;
    emailAvilability(email: string): Promise<boolean>;
    signin(email: string): Promise<Owner>;
    assignDriver(assignVehicle: AssignDriverReq): Promise<DriverVehicle>;
    getAssignedDrivers(ownerId: string): Promise<DriverVehicle[]>;
    getUnassigendDrivers(ownerId: string): Promise<Driver[]>;
    getUnassigendVehicles(ownerId: string): Promise<Vehicle[]>;
    unassignDriver(assignId: string): Promise<DriverVehicle>;
    getDriverVehicles(vehicleId: string): Promise<DriverVehicle>;
    getDrivers(id: string): Promise<Driver[]>;
    disableDriver(driverId: string): Promise<CommonRes>;
    enableDriver(driverId: string): Promise<CommonRes>;
    changePassword(id: string, passwordReq: ChangePasswordReq): Promise<Owner>;
    getWalletData(id: string): Promise<WalletRes>;
    createBankAccount(id: string, bankReq: BankAccReq): Promise<OwnerWallet>;
    makeWithdrawal(walletId: string, withdrawalReq: WithdrawalReq): Promise<OwnerDebit>;
    checkBankAcc(id: string): Promise<OwnerWallet>;
    getRewards(ownerId: string): Promise<OwnerRewards[]>;
    getProfile(id: string): Promise<Owner>;
    updateProfile(id: string, updateReq: UpdateProfileReq): Promise<Owner>;
    getNotifications(id: string): Promise<OwnerNotification[]>;
}
