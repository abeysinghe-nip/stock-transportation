import { DriverService } from './driver.service';
import { Response } from 'express';
import { CommonService } from 'src/common/common.service';
import { SignInDto } from 'src/common/requests/signIn.dto';
import { AuthService } from 'src/auth/auth.service';
import { TimerReq } from './requests/timer.req';
import { TimersGateway } from 'src/gateways/timers.gateway';
import { BookingService } from 'src/booking/booking.service';
import { RideStartReq } from './requests/rideStart.req';
import { SendCoordReq } from './requests/sendCoord.req';
import { RideGateway } from 'src/gateways/ride.gateways';
import { RideStopReq } from './requests/rideStop.req';
import { ChangePasswordReq } from '../common/requests/changePassword.req';
import { UpdateProfileReq } from 'src/common/requests/updateProfile.req';
export declare class DriverController {
    private readonly driverService;
    private readonly commonService;
    private readonly authService;
    private readonly timersGateway;
    private readonly bookingService;
    private readonly riderGateway;
    constructor(driverService: DriverService, commonService: CommonService, authService: AuthService, timersGateway: TimersGateway, bookingService: BookingService, riderGateway: RideGateway);
    emailAvailability(email: string, res: Response): Promise<Response<any, Record<string, any>>>;
    signin(signinDto: SignInDto, res: Response): Promise<Response<any, Record<string, any>>>;
    getAssignVehicle(id: string, res: Response): Promise<Response<any, Record<string, any>>>;
    getBookings(id: string, res: Response): Promise<Response<any, Record<string, any>>>;
    getSharedBookings(id: string, res: Response): Promise<Response<any, Record<string, any>>>;
    getBookingsCoordinates(id: string, bookingType: string, res: Response): Promise<Response<any, Record<string, any>>>;
    startLoadingTimer(id: string, res: Response): Promise<Response<any, Record<string, any>>>;
    stopLoadingTimer(timerReq: TimerReq, id: string, res: Response): Promise<Response<any, Record<string, any>>>;
    startUnloadingTimer(id: string, res: Response): Promise<Response<any, Record<string, any>>>;
    stopUnloadingTimer(timerReq: TimerReq, id: string, res: Response): Promise<Response<any, Record<string, any>>>;
    startRide(rideStartReq: RideStartReq, res: Response): Promise<Response<any, Record<string, any>>>;
    sendCorrdinates(coordReq: SendCoordReq, res: Response): Response<any, Record<string, any>>;
    stopRide(driverId: string, rideStopReq: RideStopReq, res: Response): Promise<Response<any, Record<string, any>>>;
    changeDriverPassword(passwordReq: ChangePasswordReq, id: string, res: Response): Promise<Response<any, Record<string, any>>>;
    getProfile(id: string, res: Response): Promise<Response<any, Record<string, any>>>;
    updateProfile(profileUpdate: UpdateProfileReq, id: string, res: Response): Promise<Response<any, Record<string, any>>>;
    getNotifications(id: string, res: Response): Promise<Response<any, Record<string, any>>>;
}
